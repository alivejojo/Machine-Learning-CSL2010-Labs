# -*- coding: utf-8 -*-
"""iml_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11UJU32cy78M-1KK8IU5mVP_X5w5L-IYD
"""

'''
Q1
(i)
a) Model - Nominal
b) Type - Ordinal 
c) Max. Price - Ratio 
d) Airbags - Ordinal
'''

import pandas as pd
import numpy as np

#loading data into a Pandas Dataframe: 
from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Cars93.csv")

df.head()
df.describe()

print(df.isnull())

df.loc[:, df.isnull().any()].columns

# to know what the replaced values of the missing values in "Rear.seat.room" and "Luggage.room" should be, we visualize the data.
X = np.arange(0,93,1)

import matplotlib.pyplot as plt
plt.hist(df['Rear.seat.room'])
plt.show()

plt.hist(df['Luggage.room'])
plt.show()

# Q1. (ii)
def replace_nullval(clm_name, _stratergy):
  from sklearn.impute import SimpleImputer
  imp = SimpleImputer(strategy= _stratergy)
  df[clm_name] = imp.fit_transform(df[clm_name].values.reshape(-1, 1))
  return df

replace_nullval('Rear.seat.room','mean')
replace_nullval('Luggage.room','mean')

df.loc[:, df.isnull().any()].columns

# Noise removal  Q1 (iii)
# Model is supposed to have String values but few are integers. 
# We cannot infer any information about the Model Name from other attributes, nor can we assign it any value such as previous or next. As model properties are unique to the model.
# Hence change the model name to str(<integral model name given>)

def noise_removal (typ, clm_name):
  # typ = what type of noise? datatype or outlier
  if typ == 1:
    if clm_name == 'Model':
      for i in range(df[clm_name].values.shape[0]):
        if type(df[clm_name].values[i])!='str':
          df[clm_name].values[i]=str(df[clm_name].values[i])
    
    if clm_name == 'Cylinders':
      for i in range(len(df[clm_name].values)):
        if df[clm_name].values[i]=='rotary':
          df[clm_name].values[i] = 0
         
  if typ == 2: 
 
    for i in range(df[clm_name].values.shape[0]):

      if df[clm_name].values[i] >= df[clm_name].values.mean() + 3*df[clm_name].values.std():
        df[clm_name].values[i] = df[clm_name].values.mean() + df[clm_name].values.std()
      elif df[clm_name].values[i] <= df[clm_name].values.mean() - 3*df[clm_name].values.std():
        df[clm_name].values[i] = df[clm_name].values.mean() - df[clm_name].values.std()
      else:
        pass

noise_removal(1,'Model')
noise_removal(1,'Cylinders')
noise_removal(2,'Length')
noise_removal(2,'Length')
noise_removal(2,'Wheelbase')
noise_removal(2,'Width')
noise_removal(2,'Rear.seat.room')
noise_removal(2,'Luggage.room')
noise_removal(2,'Passengers')

df.head(60)

# encode all the categorical features acc to type of variable jointly 
# Q1 (iv)
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
df_= df
def encoding(clm_name):
  df_[clm_name]= label_encoder.fit_transform(df[clm_name])
  return df

encoding('Manufacturer')
encoding('Type')
encoding('AirBags')
encoding('DriveTrain')
encoding('Origin')


df_.head()

print(df['Min.Price'].values.min(), df['Max.Price'].values.max())

# Q1 (v) 
# Using min-max scaler in between the range [min(Min.Price), max(MAx.price)]

clms_to_be_scaled = ['MPG.city', 'MPG.highway', 'EngineSize', 'Horsepower', 'RPM', 'Rev.per.mile', 'Fuel.tank.capacity', 'Length', 'Wheelbase', 'Width', 'Turn.circle', 'Rear.seat.room']

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(df['Min.Price'].values.min(), df['Max.Price'].values.max()))

df_copy = df.copy()

# for i in clms_to_be_scaled: 
#   df_copy[i] = scaler.fit_transform(df_copy[i])

df_copy[clms_to_be_scaled] = scaler.fit_transform( df_copy [clms_to_be_scaled])
df_copy.head()

# Q1 (vi) randomly split the dataset into 3 parts - train, validation,test
# becuase sklearn module provides splitting only into two pasrts, we repeat the process twice

from sklearn.model_selection import train_test_split


X = df.drop(columns = ['Price']).copy()
y = df['Price']
X_train , X_temp, y_train, y_temp = train_test_split(X,y, train_size = 0.7,random_state=2021)

X_valid, X_test, y_valid, y_test = train_test_split(X_temp,y_temp, test_size=0.5, random_state = 42)




# Q2
import skimage

from google.colab import files
uploaded = files.upload()

from skimage import io
img = io.imread('WIN_20210210_17_44_09_Pro.jpg')

import matplotlib.pyplot as plt
plt.imshow(img)
