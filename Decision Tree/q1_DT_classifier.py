# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J3WdiAG2OTFOdJwkwkK2bj_0NTaxhS52
"""

import numpy as np 
import pandas as pd

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("drugs.csv")
df.head()

"""**1.1**


1.   features : Age, Sex, BP, Cholesterol, Na_to_K
2.   target = Drug

**1.2**
"""

df.loc[:, df.isnull().any()].columns

# implies that none of the values are Null

"""**1.3**
*   ordinal - BP, Cholestrol 
*   nominal - Sex, drug
*   categorical - sex

"""

# Ordinal encoding for BP and cholestrol 
# oneHotEncoding for Sex 

from sklearn.preprocessing import OneHotEncoder
enc = OneHotEncoder(handle_unknown='ignore')

enc_df = pd.DataFrame(enc.fit_transform(df[['Sex']]).toarray())
df = df.drop(columns = ['Sex'])
df = df.join(enc_df)

df = df.rename(columns = {1: "Male"})
df= df.rename(columns={0: "Female"})

df.head()

!pip install category_encoders

# for encoding

import category_encoders as ce

encoder= ce.OrdinalEncoder(cols=['BP'],return_df=True,
                           mapping=[ {'col':'BP','mapping':{'HIGH':2,'NORMAL':1,'LOW':0}}, {'col':'Cholesterol','mapping':{'HIGH':1,'NORMAL':0}}])
df_encoded = encoder.fit_transform(df)

df_encoded.head(15)

# X = df_encoded[['Age','BP', 'Cholesterol','Na_to_K','Female']]
# y = df_encoded['Drug']

# splitting
from sklearn.model_selection import train_test_split

train1_, test1_ = train_test_split( df_encoded, test_size=0.30, random_state=55)
train2_, test2_  = train_test_split( df_encoded, test_size=0.20, random_state=55)
train3_, test3_ = train_test_split( df_encoded, test_size=0.10, random_state=55)

X_train1 = train1_[['Age','BP','Cholesterol','Na_to_K', 'Female', 'Male']]
y_train1 = train1_[['Drug']]
X_train2 = train2_[['Age','BP','Cholesterol','Na_to_K', 'Female','Male']]
y_train2 = train2_[['Drug']]
X_train3 = train3_[['Age','BP','Cholesterol','Na_to_K', 'Female','Male']]
y_train3 = train3_[['Drug']]

X_test1 = test1_[['Age','BP','Cholesterol','Na_to_K', 'Female', 'Male']]
y_test1 = test1_[['Drug']]
X_test2 = test2_[['Age','BP','Cholesterol','Na_to_K', 'Female','Male']]
y_test2 = test2_[['Drug']]
X_test3 = test3_[['Age','BP','Cholesterol','Na_to_K', 'Female','Male']]
y_test3 = test3_[['Drug']]

print(X_train2.shape)
print(y_train2.shape)

from sklearn.tree import DecisionTreeClassifier

classifier1 = DecisionTreeClassifier(random_state = 55, criterion = 'entropy')
classifier1.fit(X_train2,y_train2)

# Draw graph
import graphviz
from sklearn import tree
# from graphviz import tree
dot_tree = tree.export_graphviz(classifier1,filled=True,rounded=True)
graph = graphviz.Source(dot_tree, format="png") 
graph

graph.render("decision_tree_graphivz")

from google.colab import files
files.download("decision_tree_graphivz.png")

from sklearn.metrics import accuracy_score, precision_score,recall_score,f1_score, roc_auc_score,roc_curve

# Model Accuracy
pred_train_Y = classifier1.predict(X_train2)
print('Model Accuracy | ',accuracy_score(pred_train_Y,y_train2))

# Make Predictions
pred_Y = classifier1.predict(X_test2)
# Test Accuracy
print('Test Accuracy | ',accuracy_score(y_test2,pred_Y))

"""As our test set is quite small, it makes it possible to get a test accuracy = 1"""

# now for using gini-index
classifier2 = DecisionTreeClassifier(random_state = 55, criterion = 'gini')
classifier2.fit(X_train1,y_train1)
dot_tree = tree.export_graphviz(classifier2,filled=True,rounded=True)
graph = graphviz.Source(dot_tree, format="png") 
graph

graph.render("decision_tree_graphivz2")
from google.colab import files
files.download("decision_tree_graphivz2.png")

# Model Accuracy
pred_train_Y = classifier2.predict(X_train1)
print('Model Accuracy | ',accuracy_score(pred_train_Y,y_train1))

# Make Predictions
pred_Y = classifier2.predict(X_test1)
# Test Accuracy
print('Test Accuracy | ',accuracy_score(y_test1,pred_Y))

classifier3 = DecisionTreeClassifier(random_state = 55, criterion = 'gini')
classifier3.fit(X_train3,y_train3)
dot_tree = tree.export_graphviz(classifier3,filled=True,rounded=True)
graph = graphviz.Source(dot_tree, format="png") 
graph

graph.render("decision_tree_graphivz3")
from google.colab import files
files.download("decision_tree_graphivz3.png")

# Model Accuracy
pred_train_Y = classifier3.predict(X_train3)
print('Model Accuracy | ',accuracy_score(pred_train_Y,y_train3))

# Make Predictions
pred_Y = classifier3.predict(X_test3)
# Test Accuracy
print('Test Accuracy | ',accuracy_score(y_test3,pred_Y))

